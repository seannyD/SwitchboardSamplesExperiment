```{r echo=F}
getMEText = function(r,ef, wald=NULL){
AIC = r[2,]$AIC
loglikDiff = signif(diff(r$logLik),2)
chi = round(r$Chisq[2],2)
df = r$`Chi Df`[2]
p = signif(r$`Pr(>Chisq)`[2],2)
wald.text = ""
if(!is.null(wald)){
est = signif(wald[1],2)
stder = signif(wald[2],2)
t = signif(wald[3],2)
wptext = ""
if(!is.na(wald[4])){
wptext = paste(", Wald p =",signif(wald[4],2))
}
wald.text = paste("beta = ",est,", std.err = ",stder, ", Wald t = ",t,wptext,';')
}
begin = 'There was no significant'
if(p <0.1){
begin = "There was a marginal"
}
if(p < 0.05){
begin = 'There was a significant'
}
return(paste(begin,ef,"(",wald.text,"log likelihood difference =",
loglikDiff,", df = ",df,", Chi Squared =", chi,", p = ",p,")."))
}
```
# Introduction
This is an analysis of an experiment into whether people can predict if an upcoming turn is a question or a statement, based on the previous turn type and the first phoneme of the target turn.
Participants listened to a series of audio samples.  Each audio sample was made up of a *context* by speaker 1 (Statement or Inititating turn) and a *response* by speaker 2.  The response was either no audio, a single segment [w] or a single semgent other than [w].
# Load libraries
```{r warning=FALSE, message=FALSE}
library(lme4)
library(lattice)
library(gplots)
library(ggplot2)
library(sjPlot)
library(party)
library(Rmisc)
library(dplyr)
```
Function for converting from logit scale
```{r}
logit2per = function(X){
return(exp(X)/(1+exp(X)))
}
```
```{r echo=FALSE}
# Set working directory
setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/InitialPhonemeExperiment/SwitchboardSamplesExperiment/processing/")
```
# Load data
```{r}
d = read.csv("../Data/Lab_Processed.csv")
```
Each row in the data is a single response from a participant to a single sample.  The key variables are:
-  *partID*:  identifies participants
-  *contextSample*: The name of the audio sample used for the context.
-  *responseSample*: The name of the audio sample used for the response.
-  *responsePhoneme*: The first segment of the response.
-  *responseType*: Whether the first segment of the response came from a question or statement.
-  *answer*: The participant's response to "Is the next turn a question?"
Make *answer* a binary variable.
```{r}
d$answer = d$answer=="Yes"
d$lastAnswer = d$lastAnswer=="Yes"
```
Relevel response phoneme and context.
```{r}
d$responsePhoneme = relevel(d$responsePhoneme, 'other')
d$context = relevel(d$context, 'ST')
```
## Data exclusion
We exclude participant 13 because they took much longer than other participants.
```{r}
d = d[as.character(d$partID)!="13",]
```
Are there any samples that look like outliers?  Make a basic model:
```{r}
m3 = glmer(
answer ~ 1 + context * responsePhoneme +
(1 + context + responsePhoneme | partID) +
(1 | contextSample) +   # context sample
(1 | responseSample),   # response sample
data = d,
family = binomial,
control = glmerControl(optimizer="bobyqa",optCtrl = list(maxfun=2e4))
)
conXrPh = glmer(
answer ~ 1 + trialNumber +
context * responsePhoneme +
(1 + context | partID) +
(0 + responsePhoneme | partID) +
(1 | contextSample) +
(1 | responseSample) +
(1 | blockName),
data = d,
family = binomial,
control = gcontrol
)
finalModel = conXrPh
summary(finalModel)
confint(finalModel,parm="beta_", method="Wald")
summary(finalModel)$coef
cx = summary(finalModel)$coef
CI = confint(finalModel,parm="beta_", method="Wald")
cx = summary(finalModel)$coef
cbind(cx[,1],CI,cx[,2:4])
for(i in 1:5){cx[,i] = round(cx[,i],2)}
CI = confint(finalModel,parm="beta_", method="Wald")
cx = summary(finalModel)$coef
cx = cbind(cx[,1],CI,cx[,2:4])
for(i in 1:5){cx[,i] = round(cx[,i],2)}
cx
cx = summary(finalModel)$coef
cx = cbind(cx[,1],CI,cx[,2:4])
for(i in 1:5){cx[,i] = signif(cx[,i],2)}
cx
logit2per(fixef(finalModel)[1])[[1]]
# Context = ST, no response
logit2per(fixef(finalModel)[1] + fixef(finalModel)["responsePhonemenone"]  )[[1]]
# Context = ST, wh
logit2per(fixef(finalModel)[1] + fixef(finalModel)["responsePhonemewh"]  )[[1]]
# Context = IN, other response
logit2per(fixef(finalModel)[1] + fixef(finalModel)["contextIN"])[[1]]
# Context = IN, no response
logit2per(fixef(finalModel)[1] + fixef(finalModel)["responsePhonemenone"])[[1]]
# Context = IN, wh
logit2per(fixef(finalModel)[1] + fixef(finalModel)["contextIN"] + fixef(finalModel)["responsePhonemewh"])[[1]]
feLabels = matrix(c(
"(Intercept)"             ,"Intercept"      , NA,
"contextST", "Context = Statement", "context",
"contextIN", "Context = Initiating", "context",
"responsePhonemenone", "no response", 'rPhon',
"responsePhonemewh", "wh response", 'rPhon',
"contextIN:responsePhonemenone", "Context: no response", "conXrPh",
"contextIN:responsePhonemewh", "Context: wh response", "conXrPh"
), ncol=3, byrow = T)
feLabels2 = as.vector(feLabels[match(names(fixef(finalModel)),feLabels[,1]),2])
feLabels2
fixef(finalModel)
feLabels = matrix(c(
"(Intercept)"             ,"Intercept"      , NA,
"trialNumber", "Trial",NA,
"contextST", "Context = Statement", "context",
"contextIN", "Context = Initiating", "context",
"responsePhonemenone", "no response", 'rPhon',
"responsePhonemewh", "wh response", 'rPhon',
"contextIN:responsePhonemenone", "Context = In: no response", "conXrPh",
"contextIN:responsePhonemewh", "Context = In: wh response", "conXrPh"
), ncol=3, byrow = T)
feLabels2 = as.vector(feLabels[match(names(fixef(finalModel)),feLabels[,1]),2])
feLabels2
sjp.glmer(finalModel,'fe',
show.intercept = T,
geom.colors = c(1,1),
axis.title = "Odds of selecting question"
)
?"sjp.glmer"
sjp.glmer(finalModel,'fe',
show.intercept = T,
geom.colors = c(1,1),
axis.title = "Odds of selecting question",
y.offset = 0.5
)
sjp.glmer(finalModel,'fe',
show.intercept = T,
geom.colors = c(1,1),
axis.title = "Odds of selecting question",
y.offset = 0.2
)
levels(d$responsePhoneme)
d2 = d2
d2 = d
?update
fm2 = update(finalModel, data=d2)
summary(fm2)
levels(d$responsePhoneme)
levels(d2$responsePhoneme)
d2 = d
d2$responsePhoneme = relevel(d2$responsePhoneme,"wh")
levels(d2$responsePhoneme)
fm2 = update(finalModel, data=d2)
anova(trial, context,rPhon, conXrPh)
save(finalModel, file="../results/FinalModel.Rdat")
median(d$trialNumber)
max(d$trialNumber)
hist(d$trialNumber-25)
max(d$trialNumber-25)
min(d$trialNumber-25)
conXrPh = glmer(
answer ~ 1 + trialNumber.center +
context * responsePhoneme +
(1 + context | partID) +
(0 + responsePhoneme | partID) +
(1 | contextSample) +
(1 | responseSample),
data = d,
family = binomial,
control = gcontrol
)
d$trialNumber.center = d$trialNumber - 25
conXrPh = glmer(
answer ~ 1 + trialNumber.center +
context * responsePhoneme +
(1 + context | partID) +
(0 + responsePhoneme | partID) +
(1 | contextSample) +
(1 | responseSample),
data = d,
family = binomial,
control = gcontrol
)
gcontrol
library(reshape)
library(gplots)
setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/InitialPhonemeExperiment/SwitchboardSamplesExperiment/processing/")
getOrder = function(dx, dOld){
# TODO: doesn't work with later experiment blocks
# because they're coded only with ST_2
newD = data.frame()
for(id in unique(dx$partID)){
dxx = dx[dx$partID==id,]
dxx$variable = as.character(dxx$variable)
orderCol = names(dOld)[grepl("DO.BL.SET",names(dOld))]
xorder = dOld[dOld$partID==id, orderCol]
xorder = strsplit(as.character(xorder[nchar(xorder)>1]),"\\|")[[1]]
dxx$trialNumber = match(dxx$variable,xorder)
newD = rbind(newD,dxx)
}
return(newD)
}
getData = function(filename, blockName, individualColumn = "Initials", qType=2){
d = read.csv(filename, stringsAsFactors = F)
names(d)[1:10] = d[1,][1:10]
d = d[-1,]
d$partID = d[,individualColumn]
dOld = d
d = d[,!names(d) %in% c("LocationLatitude","X","LocationLongitude",'LocationAccuracy')]
d = d[,!grepl("DO\\.",names(d))]
d = d[,!names(d)%in% c("Q2.1")]
#strsplit(d$DO.BL.SET1[4],"\\|")[[1]]
keepUpTo = c(names(d)[1:which(names(d)=="Start_Exp_Online")],"partID")
dx = melt(d, id=keepUpTo)
numCases = nrow(dx)
dx = dx[dx$value!="",]
numCases2 = nrow(dx)
if(numCases!=numCases2){
print("Dropped guesses")
print(numCases - numCases2)
}
# get stimulus presentation order
dx = getOrder(dx,dOld)
#IN or ST
#Q1-Q4 if blank, it's Q5(no second turn)
#set
dx$variable = gsub("Q","",dx$variable)
varNames = as.character(unique(dx$variable))
setNum = rep(rep(1:25,each=2),length.out=length(varNames))
dx$setNum = setNum[match(dx$variable,varNames)]
dx$context = "IN"
dx$context[grepl("ST",dx$variable)] = "ST"
if(qType==2){
dx$question = sapply(dx$variable, function(X){
test1 = strsplit(X,"\\.")[[1]][1]
tx = table(strsplit(test1,"")[[1]])
if(!"_" %in% names(tx)){
return(5)
} else{
return(strsplit(test1,"_")[[1]][2])
}
})
} else{
dx$question = sapply(dx$variable, function(X){
X = gsub("\\.","_",X)
tx = table(strsplit(X,"")[[1]])
if("_" %in% names(tx)){
if(tx["_"]==1){
# if only 1 underscore
return(5)
}
}
x  =strsplit(X,'_')[[1]]
return(x[2])
})
}
dx$question = c("whQ","oQ", "whNonQ","oNonQ","None")[as.numeric(dx$question)]
dx$responsePhoneme = "wh"
dx$responsePhoneme[dx$question=='oQ' | dx$question=="oNonQ"] = "other"
dx$responsePhoneme[dx$question=='None'] = "none"
dx$responseType = "other"
dx$responseType[dx$question=='oQ' | dx$question=="whQ"] = "Q"
dx$responseType[dx$question=='None'] = "none"
dx$answer = c("No","Yes")[as.numeric(as.character(dx$value))]
plotmeans(answer=="Yes"~question, data=dx)
plotmeans(answer=="Yes"~context, data=dx)
plotmeans(answer=="Yes"~paste(question,context), data=dx)
dx$blockName = blockName
dx = dx[order(dx$partID,dx$trialNumber),]
dx$lastAnswer = c("No",dx$answer[1:(nrow(dx)-1)])
dx[dx$trialNumber==1,]$lastAnswer = "No"
return(dx)
}
online = getData("../Data/Online_Version.csv","Online")
online = online[online$partID %in% names(table(online$partID))[table(online$partID)== 50],]
online$Sex[online$Sex %in% c("F",'female','Female',"FEMALE",'')] = "F"
online$Sex[online$Sex %in% c("M",'male','Male',"MALE")] = "M"
online$contextSample = paste(online$context,online$setNum)
online$responseSample = paste(online$responsePhoneme,online$setNum)
online$partID = paste("O",as.numeric(as.factor(online$partID)),sep='')
online = online[,!names(online) %in% c("Initials","IPAddress")]
write.csv(online,"../Data/OnlineData_Processed.csv")
#########
lab1 = getData("../Data/Dialogue_1.csv","Block1", "ID", qType=1)
lab2 = getData("../Data/Dialogue_2.csv","Block2", "ID", qType=1)
lab3 = getData("../Data/Dialogue_3.csv","Block3", "ID", qType=1)
lab4 = getData("../Data/Dialogue_4.csv","Block4", "ID", qType=1)
lab5 = getData("../Data/Dialogue_5.csv","Block5", "ID", qType=1)
allLab = rbind(lab1,lab2,lab3,lab4,lab5)
sexColumn = allLab$Sex
allLab$Sex = NA
allLab$Sex[sexColumn %in% c("F",'female',"Female")] = "F"
allLab$Sex[sexColumn %in% c("M",'male',"Male")] = "M"
allLab$Nationality[allLab$Nationality=="Canadian "] = "Canadian"
allLab$Nationality[allLab$Nationality=="UK"] = "British"
allLab$Nationality[allLab$Nationality=="dutch"] = "Dutch"
allLab$EnglishType = allLab$Nationality
allLab$EnglishType[allLab$EnglishType %in% c("Dutch","Indian","Swiss, Australian, Belgian","Australian")] = "Other"
allLab$EnglishType[allLab$EnglishType %in% c("USA and Latvia","USA/LV","Latvian and USA","Canadian/Latvian","Canadian","American","Latvian, USA")] = "American"
allLab$EnglishType[allLab$EnglishType %in% c("British-American")] = "British"
allLab$Nationality2 = allLab$Nationality
allLab$Nationality2[allLab$Nationality2 %in% c("Dutch",'Swiss, Australian, Belgian')] = "European"
allLab$Nationality3 = allLab$Nationality2
allLab$Nationality3[allLab$Nationality3 %in% c("British-American","American", "Canadian")] = "Am"
allLab$Nationality3[allLab$Nationality3 %in% c("European","Indian","Australian")] = "Other"
allLab$contextSample = paste(allLab$context,allLab$setNum)
allLab$responseSample = paste(allLab$responsePhoneme,allLab$setNum)
# set the response sample to 'none' if none is included
allLab$responseSample[allLab$responsePhoneme=="none"] = "none"
allLab[allLab$partID=='16',]$Sex = "F"
allLab = allLab[,!names(allLab) %in% c("Initials","IPAddress")]
write.csv(allLab,"../Data/Lab_Processed.csv")
pdf("../results/graphs/IndividualResults.pdf", width=13,height=13)
par(mfrow=c(5,5))
for(part in sort(unique(allLab$partID))){
plotmeans(answer=="Yes" ~ paste(context, responsePhoneme),
data = allLab[allLab$partID==part,],
main = part,
ylim=c(0,1))
}
dev.off()
#########
allLab$source = "Lab"
online$source = "online"
cols = intersect(names(online),names(allLab))
allD = rbind(allLab[,cols], online[,cols])
allD = allD[,!names(allD) %in% c("Initials","IPAddress")]
write.csv(allD,"../Data/Lab_and_Online_data_Processed.csv", row.names = F)
# REMEMBER TO RUN addSwitchboardData.R !!!!
dim(d)
sum(d$partID==13)
sum(d$partID=='13')
sum(d$partID=='11')
table(d$contextSample)
sort(unique(d$contextSample))
"IN 18" %in% sort(unique(d$contextSample))
library(stringdist)
setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/InitialPhonemeExperiment/SwitchboardSamplesExperiment/processing/")
normLev.fnc <- function(a, b, costs=NULL) {
#dx = adist(a, b, counts=T, costs=costs)
x = drop(adist(a, b,costs=costs) / nchar(attr(adist(a, b, counts=T), "trafos")))
attr(x,'counts') <- NULL
attr(x,'trafos') <- NULL
return(x)
}
findTran = function(key, file){
x = sw[sw$file==file,]
dx = x[grepl(key,x$orthB),]
print(dx$orthB)
print(dx$id)
dx =x[grepl(key,x$orthA),]
print("ORTH A")
print(dx$orthA)
print(dx$id)
}
matchTran = function(samplesExtraData, tran,id, useA = F){
x = samplesExtraData$transcription==tran
y = sw$id==id
if(useA){
samplesExtraData[x,]$sex = sw[y,]$sexA
samplesExtraData[x,]$timeInFile = sw[y,]$time
samplesExtraData[x,]$speakerID = sw[y,]$spkA
samplesExtraData[x,]$swTranscription = sw[y,]$orthA
} else{
samplesExtraData[x,]$sex = sw[y,]$sexB
samplesExtraData[x,]$timeInFile = sw[y,]$time
samplesExtraData[x,]$speakerID = sw[y,]$spkB
samplesExtraData[x,]$swTranscription = sw[y,]$orthB
}
return(samplesExtraData)
}
# Link data to switchboard
allLab = read.csv("../Data/Lab_Processed.csv")
######
# Get data from switchboard
samples = read.csv("../Data/Stimuli_list.csv", stringsAsFactors = F)
sw = read.csv("~/Documents/MPI/Switchboard/NewTorreiraLubbersData/fto_utt_withSynDepthPLUSandPhones6.csv", stringsAsFactors = F)
mx = charmatch(tolower(samples$transcription),sw$orthB)
samplesExtraData = data.frame()
for(file in unique(samples$file)){
swx = sw[sw$file==file,]
sampx = samples[samples$file==file,]
#distNorm = normLev.fnc(c(swx$orthA,swx$orthB),tolower(sampx$transcription))
#distx = adist(swx$orthB,tolower(sampx$transcription))
# distx = normLev.fnc(swx$orthB,tolower(sampx$transcription))
#distx2 = stringdistmatrix(swx$orthB,tolower(sampx$transcription),method='lcs')
#distx2 = distx2/ max(distx2)
distx = adist(swx$orthB,tolower(sampx$transcription), costs=c(ins=1, del=0.5,sub=1))
distxA = adist(swx$orthA,tolower(sampx$transcription), costs=c(ins=1, del=0.5,sub=1))
matches = apply(distx , 2, function(X){which(X==min(X))})
matches = sapply(matches, function(X){if(length(X)>1){return(X[1])} else{return(X)}})
minB = apply(distx , 2, min)
matchesA = apply(distxA , 2, function(X){which(X==min(X))})
matchesA = sapply(matchesA, function(X){if(length(X)>1){return(X[1])} else{return(X)}})
minA = apply(distxA , 2, min)
for(i in 1:length(matches)){
if(minB[i] <= minA[i]){
sampx$sex[i]  = swx[matches[i],]$sexB
sampx$timeInFile[i] = swx[matches[i],]$time
sampx$speakerID[i] = swx[matches[i],]$spkB
sampx$swTranscription[i] = swx[matches[i],]$orthB
} else{
sampx$sex[i]  = swx[matchesA[i],]$sexA
sampx$timeInFile[i] = swx[matchesA[i],]$time
sampx$speakerID[i] = swx[matchesA[i],]$spkA
sampx$swTranscription[i] = swx[matchesA[i],]$orthA
}
}
samplesExtraData = rbind(samplesExtraData, sampx)
}
samplesExtraData$er = abs(nchar(samplesExtraData$transcription) - nchar(samplesExtraData$swTranscription))
t(samplesExtraData[samplesExtraData$er>10 & samplesExtraData$er<=20 & !is.na(samplesExtraData$er),c("transcription","swTranscription",'file')])
####
# Manual fixes
#"well so many of them now eem"
findTran("so many","3223")
samplesExtraData = matchTran(samplesExtraData,"well so many of them now eem",33287)
findTran("liked to","3254")
samplesExtraData = matchTran(samplesExtraData,"well i think our i i never have liked to cook food",'34392')
findTran("while ago","3377")
samplesExtraData = matchTran(samplesExtraData,"quite a while ago it's probbaly up to 20 now if I",'37824', T)
samplesExtraData = matchTran(samplesExtraData,"there certainly been ideas surfaced uh recently um","37926")
findTran("bucks","3311")
samplesExtraData = matchTran(samplesExtraData,'right now i am getting around sixty bucks a month','35877')
findTran('ever been', "3254")
samplesExtraData = matchTran(samplesExtraData,"you ever been to Houston on Beltline",34378,T)
findTran("hobbies","3182" )
samplesExtraData = matchTran(samplesExtraData,"do you have any hobbies",32470, T)
findTran('revenue',"3387")
samplesExtraData = matchTran(samplesExtraData,"is it your expectation that that would raise the total revenues collected or or lower them or what","37995",T)
findTran("course",'3377')
samplesExtraData = matchTran(samplesExtraData,"do you have long waits uh to get on the course",37846)
findTran("Porsche",'3550')
findTran("Buick",'4339')
samplesExtraData = matchTran(samplesExtraData,"we have a Buick Century now",50844,T)
findTran("just",'3345')
samplesExtraData = matchTran(samplesExtraData,"just the events that happen arounf the world interest me",37000,T)
findTran("feel",'4812')
samplesExtraData = matchTran(samplesExtraData,"so how do you feel about it",54018,useA=T)
samplesExtraData = matchTran(samplesExtraData,"well you always",37063)
samplesExtraData = matchTran(samplesExtraData,"but that's the way it goes",36986,T)
samplesExtraData = matchTran(samplesExtraData,"they don't really do that",54077)
samplesExtraData = matchTran(samplesExtraData,"it was flat",41189)
findTran("what do","4104")
samplesExtraData = matchTran(samplesExtraData,"what do i do um",48145)
#findTran("expensive","3232")
#"um the Christian college was so much more expensive"
samplesExtraData$responseType = "none"
samplesExtraData$responseType[samplesExtraData$type %in% c("Non-Q1","Q1")] = "wh"
samplesExtraData$responseType[samplesExtraData$type %in% c("Non-Q2","Q2")] = "other"
samplesExtraData$responseSample = paste(samplesExtraData$responseType, samplesExtraData$Stimuli.ID)
samplesExtraData$responseSample[samplesExtraData$responseType == "none"] = "none"
samplesExtraData$contextSample = NA
samplesExtraData$contextSample[samplesExtraData$type=="Initial"] = "IN"
samplesExtraData$contextSample[samplesExtraData$type=="Statement"] = "ST"
samplesExtraData$contextSample[samplesExtraData$type=="Statement"] = "ST"
samplesExtraData$contextSample = paste(samplesExtraData$contextSample,samplesExtraData$Stimuli.ID)
write.csv(samplesExtraData, "../Data/SamplesExtraData.csv", row.names = F)
allLab$context.sex = samplesExtraData[match(allLab$contextSample,samplesExtraData$contextSample),]$sex
allLab$response.sex = samplesExtraData[match(allLab$responseSample,samplesExtraData$responseSample),]$sex
trx = gsub("\\[[^]]+\\]","",samplesExtraData$transcription)
trx = gsub(" ",'',trx)
samplesExtraData$response.firstO = substr(trx,0,1)
allLab$response.firstO= samplesExtraData[match(allLab$responseSample,samplesExtraData$responseSample),]$response.firstO
write.csv(allLab,"../Data/Lab_Processed.csv")
dim(d)
d = d[d$contextSample != 'IN 18',]
dim(d)
conXrPh = glmer(
answer ~ 1 + trialNumber.center +
context * responsePhoneme +
(1 + context | partID) +
(0 + responsePhoneme | partID) +
(1 | contextSample) +
(1 | responseSample),
data = d,
family = binomial,
control = gcontrol
)
summary(conXrPh)
